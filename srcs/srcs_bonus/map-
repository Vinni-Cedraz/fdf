	calculate_target_scaled_map_size(d->map);
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
		d->offset.centralize_img_x = (WINDOW_WIDTH / 2) + MENU_WIDTH - 100;
		d->offset.centralize_img_y = WINDOW_HEIGHT / 8;
	else if (d->map->ratio != 1)
		d->offset.centralize_img_x = (WINDOW_WIDTH / 2.5) + MENU_WIDTH - 100;
		d->offset.centralize_img_y = WINDOW_HEIGHT / 5;
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->mlx = malloc(sizeof(t_mlx));
	d->rotations_history = ft_lstnew(NULL);
	d->state.grid_style_nb = 1;
	d->state.reverse_5_around_x = 0;
	d->state.rotate_5_around_x = 0;
	d->state.neutral_x = 1;
	d->state.neutral_y = 1;
	d->state.reverse_5_around_y = 0;
	d->state.rotate_5_around_y = 0;
	d->state.step_forward = 0;
	d->state.step_back = 0;
	d->state.isometric = 0;
	d->state.do_step_one = 0;
	d->state.do_step_two = 0;
	d->state.zoom_in = 0;
	d->state.zoom_out = 0;
	d->state.neutral_zoom = 1;
	d->offset.move_x = 0;
	d->offset.move_y = 0;
		d->offset.move_x += 100;
		d->offset.move_x -= 100;
		d->offset.move_y -= 100;
		d->offset.move_y += 100;
	else if (*key == 'g' && d->state.grid_style_nb == 1)
		d->state.grid_style_nb = 2;
	else if (*key == 'g' && d->state.grid_style_nb == 2)
		d->state.grid_style_nb = 3;
	else if (*key == 'g' && d->state.grid_style_nb == 3)
		d->state.grid_style_nb = 1;
	colorize_points_bonus(d->map);
	if (d->state.grid_style_nb == 1)
	else if (d->state.grid_style_nb == 2)
	else if (d->state.grid_style_nb == 3)
	draw_menu_background(d->img);
	mlx_put_image_to_window(d->mlx->mlx_ptr, d->mlx->win_ptr, d->img->mlx_img \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 20, YELLOW, \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 100, YELLOW, \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 180, YELLOW, \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 260, YELLOW, \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 300, YELLOW, \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 420, YELLOW, \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 580, YELLOW, \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 700, YELLOW, \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 820, YELLOW, \
	mlx_string_put(d->mlx->mlx_ptr, d->mlx->win_ptr, 10, 860, YELLOW, \
	d->img = malloc(sizeof(t_img));
	mlx_loop_hook(d->mlx->mlx_ptr, draw_bonus, d);
	mlx_hook(d->mlx->win_ptr, 02, 1L << 0, deal_keys_bonus, d);
	mlx_hook(d->mlx->win_ptr, 17, 0, close_win_bonus, d);
	mlx_loop(d->mlx->mlx_ptr);
	free(d->img);
	d->map = malloc(sizeof(t_map));
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->tool.y = 0;
	d->tool.x = -1;
	d->tool.fd = open(argv, O_RDONLY);
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		if (d->tool.y == 0)
			d->tool.line = first_line;
			d->tool.line = ft_gnl(d->tool.fd);
		if (d->tool.line == NULL)
		d->tool.split = ft_split(d->tool.line, ' ');
		free(d->tool.line);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
			make_t_point_bonus(&d, d->tool.split, d->tool.x, d->tool.y);
		d->tool.x = -1;
		d->tool.y++;
		ft_free_t_split(d->tool.split);
	return (close(d->tool.fd), 0);
	line.x = p1.x + d->offset.move_x + d->offset.centralize_img_x;
	line.y = p1.y + d->offset.move_y + d->offset.centralize_img_y;
		put_pixel_img_bonus(d->img, line.x, line.y, color);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	if (!d->state.isometric)
		d->state.rotate_5_around_x++;
		ft_lstadd_front(&d->rotations_history, ft_lstnew("rev_x"));
		if ((d->state.rotate_5_around_x - d->state.reverse_5_around_x) == 0)
			d->state.neutral_x = 1;
			d->state.neutral_x = 0;
		d->state.reverse_5_around_x++;
		ft_lstadd_front(&d->rotations_history, ft_lstnew("rot_x"));
		if ((d->state.rotate_5_around_x - d->state.reverse_5_around_x) == 0)
			d->state.neutral_x = 1;
			d->state.neutral_x = 0;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	if (!d->state.isometric)
		d->state.rotate_5_around_y++;
		ft_lstadd_front(&d->rotations_history, ft_lstnew("rev_y"));
		if ((d->state.rotate_5_around_y - d->state.reverse_5_around_y) == 0)
			d->state.neutral_y = 1;
			d->state.neutral_y = 0;
		d->state.reverse_5_around_y++;
		ft_lstadd_front(&d->rotations_history, ft_lstnew("rot_y"));
		if ((d->state.rotate_5_around_y - d->state.reverse_5_around_y) == 0)
			d->state.neutral_y = 1;
			d->state.neutral_y = 0;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	if (d->state.isometric)
	d->state.step_forward++;
	if ((d->state.step_forward - d->state.step_back) == 1)
		d->state.do_step_one = 1;
		d->state.do_step_two = 0;
	else if ((d->state.step_forward - d->state.step_back) == 2)
		d->state.do_step_two = 1;
		d->state.do_step_one = 0;
	if (d->state.do_step_one)
		take_first_step(d->map);
	else if (d->state.do_step_two)
		take_second_step(d->map);
	if (d->state.step_forward - d->state.step_back == 2)
		d->state.isometric = 1;
	if (!d->state.neutral_zoom)
	temp = d->rotations_history;
	ft_free_list(&d->rotations_history);
	d->state.isometric = 1;
	d->state.do_step_one = 0;
	d->state.do_step_two = 1;
	if (!d->state.neutral_x || !d->state.neutral_y || !d->state.neutral_zoom)
	d->state.step_back++;
	if ((d->state.step_forward - d->state.step_back) == 1)
		d->state.do_step_one = 0;
		d->state.do_step_two = 1;
	else if ((d->state.step_forward - d->state.step_back) == 0)
		d->state.do_step_two = 0;
		d->state.do_step_one = 1;
	if (d->state.do_step_two)
		undo_second_step(d->map);
	else if (d->state.do_step_one)
		undo_first_step(d->map);
	d->state.isometric = 0;
		if ((d->state.zoom_in - d->state.zoom_out) >= 36)
		if ((d->state.zoom_out - d->state.zoom_in) >= 36)
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	d->state.zoom_in++;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	if ((d->state.zoom_in - d->state.zoom_out) == 0)
		d->state.neutral_zoom = 1;
		d->state.neutral_zoom = 0;
	d->state.zoom_out++;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	if ((d->state.zoom_in - d->state.zoom_out) == 0)
		d->state.neutral_zoom = 1;
		d->state.neutral_zoom = 0;
	if (d->state.neutral_zoom)
	if (d->state.zoom_in > d->state.zoom_out)
		successive_operations = (d->state.zoom_in - d->state.zoom_out);
		successive_operations = (d->state.zoom_out - d->state.zoom_in);
