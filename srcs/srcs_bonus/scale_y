	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->he	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->offset.scale_x = d->map->target_width / (d->map->width);
	d->offset.scale_y = d->map->target_height / (d->map->height);
	if (d->map->ratio == 1 || (d->map->ratio >= 0.95 && d->map->ratio <= 1.05))
	else if (d->map->ratio != 1)
		if (d->map->max_z >= 1800)
	while (i < d->map->height)
		while (j < d->map->width)
				d->map->arr[i][j].z *= 1.1;
				d->map->arr[i][j].z /= 1.1;
				d->map->arr[i][j].z *= -1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i][j + 1], d);
			if (i < d->map->height - 1)
				render_line_bonus(d->map->arr[i][j], d->map->arr[i + 1][j], d);
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1 && i < d->map->height - 1)
				p1 = d->map->arr[i][j];
				render_line_bonus(p1, d->map->arr[i + 1][j + 1], d);
				p1 = d->map->arr[i + 1][j];
				render_line_bonus(p1, d->map->arr[i][j + 1], d);
	while (++i < d->map->height - 3)
		while (++j < d->map->width - 3)
			p1 = d->map->arr[i + 1][j];
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
			p1 = d->map->arr[i + 2][j];
			render_line_bonus(p1, d->map->arr[i][j + 1], d);
			render_line_bonus(p1, d->map->arr[i + 1][j + 2], d);
			p1 = d->map->arr[i][j + 1];
			render_line_bonus(p1, d->map->arr[i + 2][j + 2], d);
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) + z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = -y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			y = d->map->arr[i][j].y - d->offset.cy;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].y = y * cos(RAD) - z * sin(RAD) + d->offset.cy;
			d->map->arr[i][j].z = y * sin(RAD) + z * cos(RAD) + d->offset.cz;
	d->offset.cx = (double)d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cz = (double)d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(RAD) + z * sin(RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(RAD) + z * cos(RAD) + d->offset.cz;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			z = d->map->arr[i][j].z - d->offset.cz;
			d->map->arr[i][j].x = x * cos(-RAD) + z * sin(-RAD) + d->offset.cx;
			d->map->arr[i][j].z = -x * sin(-RAD) + z * cos(-RAD) + d->offset.cz;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->map->width = split_to_count_width->words;
	d->map->height = 0;
			d->map->height++;
	d->map->arr = ft_calloc(d->map->height, sizeof(t_point));
		printf("[%d] out of [%d]\r", d->tool.y, d->map->height);
		d->map->arr[d->tool.y] = ft_calloc(sizeof(t_point), d->map->width);
		while (++d->tool.x < d->map->width)
	while (++i < d->map->height)
		while (++j < d->map->width)
			if (j < d->map->width - 1)
				render_line_bonus(d->map->a/* ************************************************************************** */
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
	d->offset.cx = d->map->arr[d->map->height / 2][d->map->width / 2].x;
	d->offset.cy = d->map->arr[d->map->height / 2][d->map->width / 2].y;
	d->offset.cz = d->map->arr[d->map->height / 2][d->map->width / 2].z;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x * 1.1;
			d->map->arr[i][j].y = d->offset.cy + y * 1.1;
	while (i < d->map->height)
		while (j < d->map->width)
			x = d->map->arr[i][j].x - d->offset.cx;
			y = d->map->arr[i][j].y - d->offset.cy;
			d->map->arr[i][j].x = d->offset.cx + x / 1.1;
			d->map->arr[i][j].y = d->offset.cy + y / 1.1;
